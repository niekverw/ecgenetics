"\n","NEARBY GENES:",futureData$data$df_snp_info[Clicked,"Gene"],
"\n","#snps found: ",futureData$data$num_snps_found,
"\n","#snps missing: ",futureData$data$n.missingsnps,
"\n","---- DEBUGGING",
"\n","time query: user(",round(unname(futureData$data$query_time_tabix[1]),3),"), system(",round(unname(futureData$data$query_time_tabix[2]),3),") elapsed(",round(unname(futureData$data$query_time_tabix[3]),3),")",
"\n","w: ",input$slider_window*1000,  #, dput(futureData$data$df_snp_p[Clicked(),])
"\n",futureData$data$query$chr,":",futureData$data$query$startpos,"-",futureData$data$query$endpos
)
})
#
#### CAPTURE CLICK EVENTS
Clicked <- reactiveValues(i=1,BP="NA") # initialize
# click on table
observeEvent(input$oTable_rows_selected, {
Clicked$i <- input$oTable_rows_selected
Clicked$BP <- "NA"
})
# click on regionplot; this is generating a warning on initialization because The 'plotly_click' event tied a source ID of 'source_rp' is not registered.'
observeEvent( event_data(event = "plotly_click",source = "source_rp"), {
req(futureData$data)
s <- event_data(event = "plotly_click",source = "source_rp")
Clicked$i <- "NA"
Clicked$BP <- s$x
})
# click on heatmap  (( called source="A" because "A" is plotly's default and can't change it. ))
observeEvent(event_data(event = "plotly_click",source = "A"), {
req(futureData$data)
s <- event_data(event = "plotly_click",source = "A")
Clicked$i <- rev(hmPlot()$order)[s$y]
Clicked$BP <- "NA"
})
#### ECG plot
output$oPlot <- renderPlotly({
req(futureData$data)
if(Clicked$BP!="NA"){ # if clicked on region plot, we don't know the index
print("Clicked$BP")
print(Clicked$BP)
Clicked$i <- which(futureData$data$df_snp_info$BP == Clicked$BP)
# } else { # else...?
#   print("Clicked$i")
#   print(Clicked$i)
}
if (futureData$data$query$phenotype =="unadjusted") {
df_ecg_stats = df_ecg_unadjusted
}
if (futureData$data$query$phenotype =="stretch") {
df_ecg_stats = df_ecg_stretch
}
ecg_plot <- suppressWarnings(  make_ecg_plot(vct_snp_p=futureData$data$df_snp_p[Clicked$i,],
vct_snp_beta=if(futureData$data$df_snp_beta !=""){futureData$data$df_snp_beta[Clicked$i,]}else{""}, # not used//todo
vct_snp_se=if(futureData$data$df_snp_se !=""){futureData$data$df_snp_se[Clicked$i,]}else{""}, # not used//todo
vct_snp_info=futureData$data$df_snp_info[Clicked$i,],
df_ecg_stats = df_ecg_stats,
invert=FALSE) # average ecg signal.
)
ggplotly(ecg_plot,tooltip = "text",height = 400, width = 500,dynamicTicks=TRUE,source="source_ecgplot" )
})
#### REGIONAL PLOT
regionalPlot <- reactiveVal(NULL)
observeEvent(c(input$regionalprefreshButton), { #input$goButton,
req(futureData$data)
showModal(modalDialog("Please wait. LD is currently very slow and might take > 30sec, will make this faster soon.", footer=NULL))
# showModal(modalDialog(p("Region is Plotting, This might take a while"),
#                       title = "Region Plotting started"
# ))
data = futureData$data
f <- future({
#https://www.r-bloggers.com/shiny-1-2-0-plot-caching/
#regional_plotly(data)
regional_plot(data,for_plotly = T,LD=TRUE)
},  globals = list(data=data))
f %...>% regionalPlot()
})
output$regionalPlot <- renderPlotly({
removeModal()
req(regionalPlot())
ggplotly(regionalPlot()$plt_regional,source="source_rp")
})
output$regionalPlot_genes <- renderPlotly({
removeModal()
req(regionalPlot())
ggplotly(regionalPlot()$plt_genes,source="source_rp")
})
#### HEATMAP
#rs55851300, rs1051375, rs34081637,rs12541595 , rs10774625,
## https://stackoverflow.com/questions/53079904/shiny-future-error-in-ctxoninvalidate-reactive-context-was-created-in-one
hm_snps_selected <- reactiveValues(number=0)
slider_hmpvalue_treshold_text <- reactive({
req(futureData$data)
hm_snps_selected$number <- sum(as.numeric(futureData$data$df_snp_info$minP<input$slider_hmpvalue_treshold))
paste("#SNPs: ",hm_snps_selected$number)
})
output$oTextHeatmap <- renderText({
slider_hmpvalue_treshold_text()
})
hmPlot <- reactiveVal(NULL)
observeEvent(c(input$hmrefreshButton), { #input$goButton,
req(futureData$data)
if (hm_snps_selected$number<=1){shiny::showNotification('Need more than 1 variant, provide more variants or change P value treshold', type = "error")}
validate(need(hm_snps_selected$number>1, 'Need more than 1 variant, provide more variants or change P value treshold'))
if (hm_snps_selected$number>150){shiny::showNotification("too many snps, the max is 150 right now.", type = "error")}
validate(need(hm_snps_selected$number<=150,"too many snps, max is 150, contact us if more is needed")) # catch error
showModal(modalDialog("Please wait.", footer=NULL))
data = futureData$data
pvaltreshold = input$slider_hmpvalue_treshold # <- needs to be here
f <- future({
#https://www.r-bloggers.com/shiny-1-2-0-plot-caching/
make_heatmap_plot(df_snp_p = data$df_snp_p,
vct_snp_info = data$df_snp_info,
df_ecg_unadjusted, # does nothing yet.
pvaltreshold = pvaltreshold)
},  globals = list(df_snp_p = data$df_snp_p,
vct_snp_info = data$df_snp_info,
df_ecg_unadjusted=df_ecg_unadjusted,
pvaltreshold=pvaltreshold))
f %...>% hmPlot()
})
output$hmPlot <- renderPlotly({
#print(length(hmap$x$layout$yaxis$ticktext))
removeModal()
hmPlot()
})
#################################################
# Downloadable csv of selected dataset ----
# #sudo chown -R shiny:shiny-apps data
#################################################
output$downloadData_table <- downloadHandler(
filename = function() {
paste(gsub("stretch","RRadjusted",futureData$data$query$phenotype), "_ecgenetics_data.zip", sep = "")
},
#filename="download.zip",
content = function(file) {
phenotypename=gsub("stretch","RRadjusted",futureData$data$query$phenotype)
req(futureData$data)
df_snp_info <- futureData$data$df_snp_info
df_snp_p <- futureData$data$df_snp_p
names(df_snp_p) <- paste0("pval_",1:500)
dfecg <- cbind(df_snp_info,df_snp_p)
if (input$include_betas){
df_snp_beta <- futureData$data$df_snp_beta
df_snp_se <- futureData$data$df_snp_se
names(df_snp_beta) <- paste0("beta_",1:500)
names(df_snp_se) <- paste0("se_",1:500)
dfecg <- cbind(dfecg,df_snp_beta,df_snp_se)
}
dfecg$phenotype <- futureData$data$query$phenotype
#write.csv(dfecg, file, row.names = FALSE)
df_averagevolts <- cbind(df_ecg_unadjusted,df_ecg_stretch)
names(df_averagevolts) <- c(paste0(names(df_ecg_unadjusted),"_unadjusted"),paste0(names(df_ecg_stretch),"_RRadjusted"))
d.tmp=tempfile(pattern=paste0(phenotypename,"_"),tmpdir="data_tmp/") #paste0(getwd(),"/data"))
dir.create(d.tmp,showWarnings=TRUE,recursive=TRUE)
fecg <- paste(d.tmp,"/",phenotypename, ".snpstats.csv", sep = "")
faveragevoltage <- paste(d.tmp,"/average_voltages.csv", sep = "")
files <- c(fecg, faveragevoltage)
future({
write.csv(dfecg, fecg)
write.csv(df_averagevolts, faveragevoltage)
zip(zipfile = file, files = files)
},contentType = "application/zip")
}
)
######### TSNE:
output$oPlotTsne <- renderPlotly({
ptsne <- ggplot(dftsne, aes(x = tsne1, y = tsne2, colour = clusters,text=snps)) +
geom_point(alpha = 0.3,show.legend = FALSE ) + theme_bw()
plotly::hide_legend(plotly::ggplotly(ptsne,tooltip="text",height = 600, width = 900))
})
#### CAPTURE CLICK EVENTS
Clicked_tsne <- reactiveValues(i="NA",rsid="rs116015634") # initialize
observeEvent( event_data(event = "plotly_click",source = "A"), {
s <- event_data(event = "plotly_click",source = "A")
Clicked_tsne$i <- "NA"
Clicked_tsne$rsid <- dftsne[round(dftsne$tsne1,5) %in%  round(s$x,5),'rsid']
#plotlyOutput("oPlot_ecg_unadjusted",width="100%",height="auto"),
#plotlyOutput("oPlot_ecg_stretch",width="100%",height="auto"),
})
output$oPlot_ecg_unadjusted <- renderPlotly({
if(Clicked_tsne$rsid!="NA"){ # if clicked on region plot, we don't know the index
print("Clicked_tsne$rsid")
print(Clicked_tsne$rsid)
Clicked_tsne$i <- which(datatsne.unadjusted$df_snp_info$SNP == Clicked_tsne$rsid)
# } else { # else...?
#   print("Clicked$i")
#   print(Clicked$i)
df_ecg_stats = df_ecg_unadjusted
ecg_plot <- suppressWarnings(  make_ecg_plot(vct_snp_p=datatsne.unadjusted$df_snp_p[Clicked_tsne$i,],
vct_snp_beta=if(datatsne.unadjusted$df_snp_beta !=""){datatsne.unadjusted$df_snp_beta[Clicked_tsne$i,]}else{""}, # not used//todo
vct_snp_se=if(datatsne.unadjusted$df_snp_se !=""){datatsne.unadjusted$df_snp_se[Clicked_tsne$i,]}else{""}, # not used//todo
vct_snp_info=datatsne.unadjusted$df_snp_info[Clicked_tsne$i,],
df_ecg_stats = df_ecg_stats,
invert=FALSE) + ggtitle(paste0(Clicked_tsne$rsid,"(",datatsne.unadjusted$df_snp_info$Gene[Clicked_tsne$i],") - unadjusted")) # average ecg signal.
)
ggplotly(ecg_plot,tooltip = "text",height = 400, width = 500,dynamicTicks=TRUE,source="source_ecgplot" )
}
})
output$oPlot_ecg_stretch <- renderPlotly({
if(Clicked_tsne$rsid!="NA"){ # if clicked on region plot, we don't know the index
print("Clicked_tsne$rsid")
print(Clicked_tsne$rsid)
Clicked_tsne$i <- which(datatsne.stretch$df_snp_info$SNP == Clicked_tsne$rsid)
# } else { # else...?
#   print("Clicked$i")
#   print(Clicked$i)
df_ecg_stats = df_ecg_stretch
ecg_plot <- suppressWarnings(  make_ecg_plot(vct_snp_p=datatsne.stretch$df_snp_p[Clicked_tsne$i,],
vct_snp_beta=if(datatsne.stretch$df_snp_beta !=""){datatsne.stretch$df_snp_beta[Clicked_tsne$i,]}else{""}, # not used//todo
vct_snp_se=if(datatsne.stretch$df_snp_se !=""){datatsne.stretch$df_snp_se[Clicked_tsne$i,]}else{""}, # not used//todo
vct_snp_info=datatsne.stretch$df_snp_info[Clicked_tsne$i,],
df_ecg_stats = df_ecg_stats,
invert=FALSE) + ggtitle(paste0(Clicked_tsne$rsid,"(",datatsne.stretch$df_snp_info$Gene[Clicked_tsne$i],") - RR-adjusted")) # average ecg signal.
)
ggplotly(ecg_plot,tooltip = "text",height = 400, width = 500,dynamicTicks=TRUE,source="source_ecgplot" )
}
})
#####################################################################
#### MR:
####################################################################
rv_mr <- reactiveValues(dfmrexposures = NULL,mrplot_unadjusted=NULL,mrplot_rradjusted=NULL)
observe({ # file upload
req(input$fmrexposures)
if (is.null(input$fmrexposures)) {return(NULL)}
print(input$fmrexposures$datapath)
dfmrexposures <- data.table::fread(input$fmrexposures$datapath, header=T, data.table = F)#, verbose = T)
### insert mendelian_randomization.R ()
dfmrexposures$uniqid <- make_uniqID(dfmrexposures$CHR,dfmrexposures$BP,dfmrexposures$EFAL,dfmrexposures$NEFAL)
output$tbl_dfmrexposures <- renderTable({
dfmrexposures
})
rv_mr$dfmrexposures <<- dfmrexposures
})
observeEvent(rv_mr$dfmrexposures,{
req(rv_mr$dfmrexposures)
input= unique(rv_mr$dfmrexposures$uniqid)
query <- process_user_input(input,mapping.proteincoding)
tabix_query <- get_tabix_query(query,df.static.pos,df.static.rsid)
showModal(modalDialog("Please wait.", footer=NULL))
myFuture <- future(  {
data_unadjusted <- extract_multiple_variants(tabix_query,dir_data,
f.data_p="unadjusted.logP.outfile.tsv.gz",
f.data_beta="unadjusted.BETA.outfile.tsv.gz",
f.data_se="unadjusted.SE.outfile.tsv.gz",
f.data.index="unadjusted.logP.outfile.index.tsv.gz"
)
data_unadjusted <- harmonizedfs(rv_mr$dfmrexposures,data_unadjusted)
mr_unadjusted <- ecg_wide_ivw(data_unadjusted)
data_unadjusted$df_snp_info[1,]$SNP <- "IVW-fixed effect unadjusted"
data_unadjusted$df_snp_info[1,]$Gene <- "IVW-fixed effect unadjusted"
mrplot_unadjusted <- make_ecg_plot(vct_snp_p=t(data.frame(mr_unadjusted$p)),
vct_snp_beta=t(data.frame(mr_unadjusted$b)), #data$df_snp_beta,
vct_snp_se=t(data.frame(mr_unadjusted$s)), #data$df_snp_se,
vct_snp_info=data_unadjusted$df_snp_info[1,],
df_ecg_stats=df_ecg_unadjusted,
invert=FALSE) #+ ggtitle(paste0("unadjusted"))
data_rradjusted <- extract_multiple_variants(tabix_query,dir_data,
f.data_p="stretch.logP.outfile.tsv.gz",
f.data_beta="stretch.BETA.outfile.tsv.gz",
f.data_se="stretch.SE.outfile.tsv.gz",
f.data.index="stretch.logP.outfile.index.tsv.gz"
)
data_rradjusted <- harmonizedfs(rv_mr$dfmrexposures,data_rradjusted)
mr_rradjusted <- ecg_wide_ivw(data_rradjusted)
data_rradjusted$df_snp_info[1,]$SNP <- "IVW-fixed effect RR-adjusted"
data_rradjusted$df_snp_info[1,]$Gene <- "IVW-fixed effect RR-adjusted"
mrplot_rradjusted <- make_ecg_plot(vct_snp_p=t(data.frame(mr_rradjusted$p)),
vct_snp_beta=t(data.frame(mr_rradjusted$b)), #data$df_snp_beta,
vct_snp_se=t(data.frame(mr_rradjusted$s)), #data$df_snp_se,
vct_snp_info=data_rradjusted$df_snp_info[1,],
df_ecg_stats=df_ecg_unadjusted,
invert=FALSE) #+ ggtitle(paste0("RR-adjusted"))
dfmrexposures_NA <- rv_mr$dfmrexposures[!rv_mr$dfmrexposures$uniqid %in% data_unadjusted$df_snp_info$uniqid,]
dfmrexposures_nonNA <- rv_mr$dfmrexposures[rv_mr$dfmrexposures$uniqid %in% data_unadjusted$df_snp_info$uniqid,]
return(list(dfmrexposures_NA=dfmrexposures_NA,
dfmrexposures_nonNA=dfmrexposures_nonNA,
data_unadjusted=data_unadjusted,
data_rradjusted=data_rradjusted,
mrplot_unadjusted=mrplot_unadjusted,
mrplot_rradjusted=mrplot_rradjusted))
})
promises::then(
myFuture,
onFulfilled = function(value) {
#print(str(value))
#print(value)
#rv_mr <<- value
rv_mr$mrplot_rradjusted <<- value$mrplot_rradjusted
rv_mr$mrplot_unadjusted <<- value$mrplot_unadjusted
rv_mr$dfmrexposures_NA <<- value$dfmrexposures_NA
rv_mr$dfmrexposures_nonNA <<- value$dfmrexposures_nonNA
rv_mr$data_unadjusted <<- value$data_unadjusted
rv_mr$data_rradjusted <<- value$data_rradjusted
futureData$data <<- value$data_unadjusted
removeModal()
#rv_mr$mrplot_rradjusted <<- value$mrplot_rradjusted
},
onRejected = function(value) {
shiny::showNotification("No data found", type = "error")
removeModal()
}
)
})
output$Omrplot_rradjusted <- renderPlotly({
req(rv_mr$mrplot_rradjusted)
ggplotly(rv_mr$mrplot_rradjusted,tooltip = "text",height = 400, width = 500,dynamicTicks=TRUE,source="source_ecgplot" )
})
output$Omrplot_unadjusted <- renderPlotly({
req(rv_mr$mrplot_unadjusted)
ggplotly(rv_mr$mrplot_unadjusted,tooltip = "text",height = 400, width = 500,dynamicTicks=TRUE,source="source_ecgplot" )
})
#
output$Oplot_freqcheck <- renderPlot({
req(rv_mr$data_unadjusted)
plot(rv_mr$data_unadjusted$dfexposure$EAF ,
rv_mr$data_unadjusted$df_snp_info$EAF,
xlab="EAF (Exposure data)",
ylab="EAF (ECG data)")
})
output$txt_num_mr_variants <- renderText({
req(rv_mr$dfmrexposures)
paste0("number of variants in the MR: ",nrow(rv_mr$dfmrexposures_nonNA),"\n",
"number of variants not found: ",nrow(rv_mr$dfmrexposures_NA))
})
}
shinyApp(ui, server)
# "\n","Heart rate: <tbd>",
# "\n","Heart rate recovery 10ms: <tbd>",
# "\n","Heart rate recovery 50ms: <tbd>",
# "\n","Heart rate increase: <tbd>",
# "\n","QRS Duration: <tbd>",
# "\n","PR Interval: <tbd>",
# "\n","QT Interval: <tbd>",
# "\n","12-Lead Sum: <tbd>",
# "\n","Sokolow-Lyon: <tbd>",
# "\n","Cornel: <tbd>",
# "\n","ST-Wave Voltage: <tbd>",
# "\n","T-Wave Voltage: <tbd>",
# "\n","Atrium fibrilation: <tbd>"
require(raster)
require(ggplot2)
#install.packages("devtools")
#devtools::install_github("MRCIEU/TwoSampleMR")
setwd("/Users/niek/repos/ecgenetics/")
source("global.R")
source("helpers.R")
source("helpers.heatmap.R")
source("helpers.regionalplot.R")
source("helpers.mendelianrandomization.R")
source("get_nearest_gene.r")
#######################################
#
data(gwas_catalog)
force(gwas_catalog)
force(gwas_catalog)
#######################################
#
dfgwas_catalog <- data(gwas_catalog)
#######################################
#
dfgwas_catalog <- as.data.frame(data(gwas_catalog))
View(dfgwas_catalog)
#######################################
#
dfgwas_catalog <- as.data.frame(gwas_catalog)
View(dfgwas_catalog)
dfmrexposures <- dfgwas_catalogdfgwas_catalog[dfgwas_catalog$PubmedID %in% 29403010,]
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$PubmedID %in% 29403010,]
dfmrexposures
View(dfexposure)
View(dfmrexposures)
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$STUDY.ACCESSION %in% GCST005982,]
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$STUDY.ACCESSION %in% "GCST005982",]
View(dfmrexposures)
names(dfmrexposures)
dput(names(names(dfmrexposures) ))
dput(colnames(dfmrexposures) )
names(dfmrexposures) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
df.static.rsid
View(df.static.pos)
names(dfmrexposures) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
names(dfmrexposures) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
dfmrexposures[.( dfmrexposures$SNP )][,c("CHR", "i")]
df.static.rsid[.( dfmrexposures$SNP )][,c("CHR", "i")]
dfmrexposures$SNP
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )][,c("CHR", "i")]
snps_rsids
dfmrexposures$SNP
snps_rsids
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )][,c("CHR", "i")]
snps_rsids$i
df.static.pos[df.static.pos$i %in% snps_rsids$i,]
merge(snps_rsids,df.static.pos[df.static.pos$i %in% snps_rsids$i,],by="i")
snps_rsids <- df.static.rsid[.( snps_rsids )]
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )]
merge(snps_rsids,df.static.pos[df.static.pos$i %in% snps_rsids$i,],by="i")
paste0("rs",snps_rsids$SNP)
snps_rsids$SNP <- paste0("rs",snps_rsids$SNP)
snps_rsids$SNP
snps_rsids
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )]
snps_rsids <- merge(snps_rsids,df.static.pos[df.static.pos$i %in% snps_rsids$i,],by="i")
snps_rsids$SNP <- paste0("rs",snps_rsids$SNP)
snps_rsids
merge(dfmrexposures,snps_rsids,by="SNP")
dfmrexposures <- merge(dfmrexposures,snps_rsids,by="SNP")
#######################################
#
study_acc =  "GCST005982"
fwrite(x=dfmrexposures,file = paste0("/Users/niek/Downloads/",study_acc,".tsv"),quote = F,sep="\t" )
dfmrexposures[,c("SE","BETA", "BP", "CHR", "SNP", "EFAL","NEFAL", "EAF")]
study_acc =  "GCST005982" #calcium
dfgwas_catalog <- as.data.frame(gwas_catalog)
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$STUDY.ACCESSION %in% study_acc,]
names(dfmrexposures) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
dfmrexposures
dfgwas_catalog
View(dfgwas_catalog)
dfgwas_catalog <- as.data.frame(gwas_catalog)
names(dfgwas_catalog) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
View(dfgwas_catalog)
complete.cases(dfgwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")])
dfgwas_catalog[complete.cases(dfgwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),]
View(dfgwas_catalog)
dfgwas_catalog <- dfgwas_catalog[complete.cases(dfgwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),] # no missing data.
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$STUDY.ACCESSION %in% study_acc,]
dfmrexposures
View(dfgwas_catalog)
#######################################
#
study_acc =  "GCST002201" #calcium
dfgwas_catalog <- as.data.frame(gwas_catalog)
names(dfgwas_catalog) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
dfgwas_catalog <- dfgwas_catalog[complete.cases(dfgwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),] # no missing data.
dfmrexposures <- dfgwas_catalog[dfgwas_catalog$STUDY.ACCESSION %in% study_acc,]
View(dfmrexposures)
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )]
snps_rsids <- merge(snps_rsids,df.static.pos[df.static.pos$i %in% snps_rsids$i,],by="i")
snps_rsids$SNP <- paste0("rs",snps_rsids$SNP)
dfmrexposures <- merge(dfmrexposures,snps_rsids,by="SNP")
dfmrexposures[,c("SE","BETA", "BP", "CHR", "SNP", "EFAL","NEFAL", "EAF")]
fwrite(x=dfmrexposures,file = paste0("/Users/niek/Downloads/",study_acc,".tsv"),quote = F,sep="\t" )
View(gwas_catalog)
dfgwas_catalog <- as.data.frame(gwas_catalog)
names(dfgwas_catalog) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
dfgwas_catalog <- dfgwas_catalog[complete.cases(dfgwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),] # no missing data.
#
study_acc =  "GCST002201" #calcium
gwas_catalog <- as.data.frame(gwas_catalog)
names(gwas_catalog) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
gwas_catalog <- gwas_catalog[complete.cases(gwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),] # no missing data.
View(gwas_catalog)
study_acc =  "GCST005829" #grip strength
gwas_catalog <- as.data.frame(gwas_catalog)
names(gwas_catalog) <- c("Phenotype_simple", "MAPPED_TRAIT_EFO", "MAPPED_TRAIT_EFO_URI",
"Initial_sample_description", "Replication_sample_description",
"STUDY.ACCESSION", "Phenotype", "Phenotype_info", "PubmedID",
"Author", "Year", "SNP", "CHR", "bp_ens_GRCh38", "Region", "gene",
"Gene_ens", "EFAL", "NEFAL", "BETA", "SE", "pval",
"units", "EAF", "date_added_to_MRBASE")
gwas_catalog <- gwas_catalog[complete.cases(gwas_catalog[,c("SE","BETA", "CHR", "SNP", "EFAL","NEFAL", "EAF")]),] # no missing data.
dfmrexposures <- gwas_catalog[gwas_catalog$STUDY.ACCESSION %in% study_acc,]
snps_rsids <- as.numeric(unlist(lapply(dfmrexposures$SNP,function (x) if(startsWith(x,"rs" ) ){ sub("rs","",x)} )))
snps_rsids <- df.static.rsid[.( snps_rsids )]
snps_rsids <- merge(snps_rsids,df.static.pos[df.static.pos$i %in% snps_rsids$i,],by="i")
snps_rsids$SNP <- paste0("rs",snps_rsids$SNP)
dfmrexposures <- merge(dfmrexposures,snps_rsids,by="SNP")
dfmrexposures[,c("SE","BETA", "BP", "CHR", "SNP", "EFAL","NEFAL", "EAF")]
fwrite(x=dfmrexposures,file = paste0("/Users/niek/Downloads/",study_acc,".tsv"),quote = F,sep="\t" )
View(gwas_catalog)
